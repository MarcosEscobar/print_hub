<%= form_for(@print) do |f| %>
  <%= content_for :js_extra do -%>
    <%= raw "var print_job='#{generate_template(f, :print_jobs)}';" %>
  <% end -%>
  <%= show_error_messages(@print) %>

  <div class="field">
    <%= f.label :printer %>
    <%= print_destinations_field(f) %>
  </div>
  <div class="field">
    <%= f.label :customer, :for => :print_auto_customer_name %>
    <% field_classes = [:autocomplete_field] %>
    <% field_classes << :field_with_errors unless @print.errors[:customer_id].blank? %>
    <%= f.text_field :auto_customer_name, :value => @print.customer,
      :class => field_classes.join(' '),
      :'data-autocomplete-url' => autocomplete_for_customer_name_prints_path %>
    <% if @print.customer %>
      <%= link_to_function 'X',
        "$('print_auto_customer_name').setValue(''); $('print_customer_id').setValue(''); this.remove()",
        :class => :remove %>
    <% end %>
    <div class="autocomplete_container">
      <div class="autocomplete" style="display: none;"></div>
    </div>
    <%= f.hidden_field :customer_id, :class => :autocomplete_id %>
  </div>
  <section class="nested_items">
    <h2><%= t :print_jobs, :scope => [:view, :prints] %></h2>
    
    <div id="print_jobs_headers" class="headers">
      <h3><%= PrintJob.human_attribute_name :document_id %></h3>
      <h3><%= PrintJob.human_attribute_name :copies %></h3>
      <h3><%= PrintJob.human_attribute_name :price_per_copy %></h3>
      <h3><%= PrintJob.human_attribute_name :range %></h3>
      <h3><%= PrintJob.human_attribute_name :two_sided %></h3>
      <br />
    </div>
    
    <div id="print_jobs" class="items">
      <%= f.fields_for :print_jobs do |pj_f| %>
        <%= render :partial => 'print_job',
          :locals => {:f => pj_f, :is_dynamic => false} %>
      <% end %>
    </div>
  </section>

  <div class="add_nested_item">
    <%= link_to t(:'view.prints.add_print_job'), '#',
      :'data-template' => :print_job, :'data-container' => :print_jobs,
      :'data-event' => :add_nested_item %>
  </div>

  <div class="actions">
    <%= f.hidden_field :lock_version %>
    <%= f.submit %>
    <%= text_field_tag :price, ('%.2f' % @print.price), :id => :price %>
  </div>
<% end %>
<script type="text/javascript">
  document.on('autocomplete:update', 'form', function(event) {
    var element = $(event.memo);
    var pages = element.readAttribute('data-pages');
    var printJob = element.up('.print_job');

    printJob.down('input.document_pages').setValue(pages);
    printJob.down('a.details_link').writeAttribute('href',
      element.readAttribute('data-url'));
    printJob.down('a.details_link').show();
    printJob.next('.dynamic_details').update('')
  });

  document.on('keyup', 'input[name$="[range]"]', function(event, element) {
    var validRanges = true, maxPage = undefined, rangePages = 0;
    var pages = parseInt(
      element.up('.print_job').down('input.document_pages').getValue()
    );
    var ranges = element.getValue().trim().split(/\s*,\s*/).sortBy(function(r) {
      return parseInt(r.match(/^\d+/)) || 0;
    });

    ranges.each(function(r) {
      var data = r.match(/^(\d+)(-(\d+))?$/);
      var n1 = Try.these(function() { return parseInt(data[1]); });
      var n2 = Try.these(function() { return parseInt(data[3]); });
      
      validRanges = validRanges && n1 && n1 > 0 && (!n2 || n1 < n2);
      validRanges = validRanges && (!maxPage || maxPage < n1);

      maxPage = n2 || n1;
      rangePages += n2 ? n2.succ() - n1 : 1
    });

    if((element.getValue().blank() || validRanges) &&
      (!pages || !maxPage || pages >= maxPage)) {
      element.removeClassName('field_with_errors');

      if(element.getValue().blank() && pages) {
        element.store('range_pages', pages);
        console.log('pages: ' + pages);
      } else if(!element.getValue().blank() && validRanges) {
        element.store('range_pages', rangePages);
      }
    } else {
      element.addClassName('field_with_errors');
    }
  });

  document.on('change', '.price_modifier', function(event, element) {
    var totalPrice = 0.0;
    var job = element.up('.print_job');
    var copies = parseInt(job.down('input[name$="[copies]"]').getValue());
    var pricePerCopy = parseFloat(
      job.down('input[name$="[price_per_copy]"]').getValue()
    );
    var rangePages = parseInt(
      job.down('input[name$="[range]"]').retrieve('range_pages')
    );

    job.store('price', copies * pricePerCopy * rangePages);

    $$('.print_job').each(function(e) { totalPrice += e.retrieve('price'); });

    if(totalPrice) { $('price').setValue(totalPrice.toFixed(2)); }
  });

  document.on('change', 'input[name$="[two_sided]"]', function(event, element) {
    var priceElement = element.up('.print_job').down(
      'input[name$="[price_per_copy]"]');

    if(element.checked) {
      priceElement.setValue(element.readAttribute('data-price-per-two-sided'));
    } else {
      priceElement.setValue(element.readAttribute('data-price-per-one-sided'));
    }
  });
</script>